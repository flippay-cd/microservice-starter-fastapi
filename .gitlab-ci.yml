include:
  - project: "experience/ci-templates"
    ref: main
    file: "/backend/werf-build-and-deploy.gitlab-ci.yml"
  - project: "experience/ci-templates"
    ref: main
    file: "/backend/lint.gitlab-ci.yml"
  - project: "experience/ci-templates"
    ref: main
    file: "/backend/test.gitlab-ci.yml"
  - project: "experience/ci-templates"
    ref: main
    file: "/backend/deps-py.gitlab-ci.yml"
  {%- if db == "postgres" %}
  - project: "experience/ci-templates"
    ref: main
    file: "/backend/check-migrations.gitlab-ci.yml"
  {%- endif %}

stages:
  - build
  - lint
  - test
  - deploy
  - cleanup

variables:
  ENABLE_ALL_IMAGES: "false"
  ENABLE_DEV_IMAGES: "false"

build:
  variables:
    ENABLE_DEV_IMAGES: "true"
  script:
    - werf build dev --save-build-report
    - DEV_IMAGE_NAME=$(cat .werf-build-report.json | jq .Images.dev.DockerImageName -r)
    - echo "DEV_IMAGE_NAME=$DEV_IMAGE_NAME" > build.env

lint:
  image: $DEV_IMAGE_NAME
  script:
    - task ci:lint

{%- if db == "postgres" %}
check_migrations:
  image: $DEV_IMAGE_NAME
  script:
    - task ci:migrations:check
{%- endif %}

deploy_to_staging:
  variables:
    VALUES_FILE: ".helm/staging/values.yaml"
    SECRET_VALUES_FILE: ".helm/staging/secret-values.yaml"
  environment:
    name: staging
    {%- if ingress == 'public' %}
    url: "https://experience.staging.k8s-dev.{{ top_domain }}/{{ api_gateway_path }}/docs"
    {%- elif ingress == 'public-subdomain' %}
    url: "https://{{ project_slug }}.staging.k8s-dev.{{ top_domain }}/docs"
    {%- endif %}

stop_staging:
  rules:
    - when: never

deploy_to_production:
  variables:
    VALUES_FILE: ".helm/production/values.yaml"
    SECRET_VALUES_FILE: ".helm/production/secret-values.yaml"
  environment:
    name: production
    {%- if ingress == 'public' %}
    url: "https://experience.{{ top_domain }}/{{ api_gateway_path }}/docs"
    {%- elif ingress == 'public-subdomain' %}
    url: "https://{{ project_slug }}.{{ top_domain }}/docs"
    {%- endif %}

test:
  image: $DEV_IMAGE_NAME
  script:
      - task ci:tests
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  services:
    {%- if db == "postgres" %}
    - name: postgres
      alias: postgres
      variables:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    {%- endif %}
  variables:
    PROJECT_NAME: {{ project_slug }}
    {%- if db == "postgres" %}
    POSTGRES_DB: db
    POSTGRES_USER: user
    POSTGRES_PASSWORD: password
    POSTGRES_HOST: postgres
    {%- endif %}
