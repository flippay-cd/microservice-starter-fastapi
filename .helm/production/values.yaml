.env_template: &env
  env:
    PROJECT_NAME: {{ project_name }}
{%- if http_framework == 'fastapi' %}
    FASTAPI_HOST: 0.0.0.0
    API_GATEWAY_PATH: "/{{ api_gateway_path }}"
    DEBUG: "false"
{%- endif %}
{%- if cache == 'redis' %}
    REDIS_HOST: ""
    REDIS_PORT: "6379"
{%- endif %}
{%- if broker == 'rabbitmq' %}
    RABBITMQ_USER: "{{ package_name }}"
    RABBITMQ_HOST: "rabbitmq-flippay.rabbit-production.svc.cluster.local"
    RABBITMQ_PORT: "5672"
    RABBITMQ_QUEUE: "{{ package_name }}"
{%- endif %}
{%- if db == 'postgres' %}
    POSTGRES_HOST: "pgbouncer-main.infra-patroni.svc.cluster.local"
    POSTGRES_DB: "{{ package_name }}"
    POSTGRES_PORT: "5432"
    POSTGRES_USER: "{{ package_name }}"
    SQLALCHEMY_POOL_SIZE: 0
{%- endif %}
{%- if event_bus_consumer == 'faststream' %}
    FASTSTREAM_PREFETCH_COUNT: 10
{%- endif %}

{{ project_slug }}:
  port: 8000
{%- if ingress != 'no' %}
  ingress:
    dex_enabled: false
    enabled: true
{%- if ingress == 'public' %}
    generate_certificate: false
    tls_name: "{{ top_domain }}-wild-tls"
    strip_to_root: true
    url: "flippay.{{ top_domain }}"
    paths: [
      "/{{ api_gateway_path }}",
    ]
{%- endif %}
{%- if ingress == 'public-subdomain' %}
    generate_certificate: true
    tls_name: "{{ project_slug }}.{{ top_domain }}-wild-tls"
    url: "{{ project_slug }}.{{ top_domain }}"
    paths: [
      "/",
    ]
{%- endif %}
{%- endif %}
  resources:
    cpu: 300m
    memory: 1000Mi
  priority_class: "production-medium"
  hpa:
    min_replicas: 3
    max_replicas: 5
    averageValue: 80
  pdb:
    max_unavailable: "30%"
  <<: *env

{%- if worker == 'dramatiq' %}
dramatiq-worker:
  hpa:
    min_replicas: 2
    max_replicas: 4
    averageValue: 70
  pdb:
    max_unavailable: "100%"
  command: ["task", "dramatiq:run:prod"]  # TODO: update chart to support args instead of command
  healthcheck:
    enabled: false
  resources:
    cpu: 100m
    memory: 512Mi
  <<: *env
{%- endif %}

{%- if event_bus_consumer == 'faststream' %}
faststream:
  hpa:
    min_replicas: 1
    max_replicas: 4
    averageValue: 70
  pdb:
    max_unavailable: "100%"
  command: ["task", "faststream:run:prod"]  # TODO: update chart to support args instead of command
  healthcheck:
    enabled: true
  resources:
    memory: 768Mi
    cpu: 100m
  cleanup:
    enabled: true
    schedule: "0 1 * * *" # At 01:00 every day
  <<: *env
{%- endif %}
